
>> Mongo DB _ NoSQL Document Database

>> Document _ A way to organize and store data as a set of field-value pairs

				{
				 'field1': 'value1',
				 'field2': 'value2',
				 'name': 'zuz',
				 'age': 26
				}			 
				 
>> Collection _ An organized store of documents, usually with common fields between documents

>> Database _ multiple collections 

>> The documents in a single collection do not need to have the same set of fields and the data type for a field can differ across documents within a collection.

>> To change the structure of the documents in a collection, such as add new fields, remove existing fields, or change the field values to a new type, 
   update the documents to the new structure.
   
>> Collections are assigned an immutable UUID. The collection UUID remains the same across all members of a replica set and shards in a sharded cluster.
   To retrieve the UUID for a collection
   - db.getCollectionInfos()

___________________________________________________________________________________________________________________________________________________________________

>> To display the current database
   - db
   
     -- the default database is test
   
>> To switch databases, type <use db>
   - use lessTest;
   
     -- To create a new database, issue the use <db> command with the database that you would like to create.

___________________________________________________________________________________________________________________________________________________________________

>> To list the databases available to the user
   - show dbs;
   - show databases;
   
___________________________________________________________________________________________________________________________________________________________________

>> For example, the following commands create both the database myNewDatabase and the collection myCollection using the insertOne() operation:
   - use myNewDatabase;
   - db.myCollection.insertOne({x: 1});
   - db.myNewCollection3.createIndex({y: 1})
   
     -- If a collection does not exist, MongoDB creates the collection when you first store data for that collection.
	 -- Both the insertOne() and the createIndex() operations create their respective collection if they do not already exist.

>> Explicit Creation
   - db.createCollection("newCollection")
   
     -- db.createCollection() method explicitly creates a collection with various options, such as setting the maximum size or the documentation validation rules.
	 
___________________________________________________________________________________________________________________________________________________________________

>> To get all data of a collection
   - db.myCollection.find()
   - db.myCollection.find({})
   - db.getCollection("myCollection").find()
   - db.getCollection("myCollection").find({})
   
>> To clear the mongosh Console
   - cls
   - press Ctrl + L
   - console.clear()

>> To terminate a running command or query in mongosh, press Ctrl + C.
   - Ctrl + C
   
     -- Ctrl + C terminates the process in the shell, but does not terminate the process on the MongoDB server. 
	 -- This behavior differs from the db.killOp() method, which terminates commands on the server.
	 
___________________________________________________________________________________________________________________________________________________________________

>> To insert a single document
   - db.collection.insertOne()
   
     -- db.movies.insertOne(
	                    { 
						  title: "Gladiator",
						  genres: ["Drama", "History"],
						  runtime: 121,
						  rated: "R",
						  directors: [ "Yorgos Lanthimos", 123 ],
						  type: "movie"
						}
						   )
					
>> To insert multiple documents
   - db.collection.insertMany()
     
	 -- To insert Multiple Documents to the collection pass an array of documents to the method
   
     -- db.movies.insertMany([
	                    {
						  title: "Gladiator",
						  genres: ["Drama", "History"],
						  runtime: 121,
						  rated: "R",
						  directors: [ "Yorgos Lanthimos", 123 ],
						  type: "movie"
						},
						{  
						  title: "PrinceArthur",
						  genres: ["Drama", "History"],
						  runtime: 234
						  rated: "A,
						  directors: [ "Yorgos Lanthimos", 123 ],
						  type: "movie"
						}
						    )]
							
___________________________________________________________________________________________________________________________________________________________________

>> To read all documents in the collection:
   - use databaseName;
   - db.movies.find()                     <=>      SELECT * FROM movies
   - db.getCollection("movies").find()

>> To retrieve the inserted document
   - db.movies.find({title: "Gladiator"})
   - db.getCollection("movies").find({title: "Gladiator"})   <=> SELECT * FROM movies WHERE title = "Gladiator"
___________________________________________________________________________________________________________________________________________________________________

>> Embedded/Nested Documents

   - db.inventory.insertMany([
                  {item: "journal", qty: 25, size: {h: 14, w: 21, l: 15, uom: "cm"}, status: "A"},
				  {item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A"},
				  {item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D"},
				  {item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D"},
				  {item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
				             ]) 
							 
>> Equality matches on the whole embedded document require an exact match of the specified <value> document, including the field order.
   - db.inventory.find( {size: {h: 14, w: 21, uom: "cm"}} )
     -- No results (as in the first document there is also a field <l: 15>)
   
   - db.inventory.find( {size: {h: 14, w: 21, uom: "cm", l: 15}} )
     -- No results (not the same field order as in the document)
	 
___________________________________________________________________________________________________________________________________________________________________

>> Query on Nested Field
   -- To specify a query condition on fields in an embedded/nested document, use dot notation ("field.nestedField")
   -- !!! When querying using dot notation, the field and nested field must be inside quotation marks. 
   
   - db.getCollection("inventory").find({"size.uom": "in"})
   - db.getCollection("inventory").find({"size.h": {$lt: 15}})
   
___________________________________________________________________________________________________________________________________________________________________

>> Query on Nested Field & Specify AND Condition
   - db.getCollection("inventory").find({"size.h": {$lt: 15}, "size.uom": "in", status: "D"})

___________________________________________________________________________________________________________________________________________________________________

>> Operators

   { <field1>: { <operator1>: <value1> }, ... }
___________________________________________________________________________________________________________________________________________________________________

>> $in operator
>> $in operator selects the documents where the value of a field equals any value in the specified array.
   
   -- { field: { $in: [<value1>, <value2>, ... <valueN> ] } }
   
   - db.getCollection("Locations").find(
										 {
										  name: {$in: ["Airport", "Agricultural Site"]}
										 }
									    )
										
	<=> SELECT * 
	    FROM Locations
		WHERE name in ("Airport", "Agricultural Site")
									   
___________________________________________________________________________________________________________________________________________________________________

>> AND Logical Operator
   - db.movies.find({countries: "Mexico", "imdb.rating": {$gte: 7}})
   
     -- so that the query selects the documents in the collection that match all the conditions.
   
___________________________________________________________________________________________________________________________________________________________________

>> OR Logical Operator
   -- To return movies from the collection which were released in 2010 and either won at least 5 awards or have a genre of Drama:

   - db.movies.find({
					year: 2010,
                    $or: [{"awards.wins": {$gte: 7}}, {genres: "Drama"}]
					})

   - db.getCollection("collectionName").find({ $or: [{}, {}] })
___________________________________________________________________________________________________________________________________________________________________

>> To format the results, append the .pretty() to the find operation:
   - db.getCollection("inventory").find().pretty()
   
___________________________________________________________________________________________________________________________________________________________________

>> Query an Array


   - db.inventory.insertMany([
							{ item: "journal", qty: 25, status: "A", size: { h: 14, w: 21, uom: "cm" }, tags: [ "blank", "red" ] },
							{ item: "notebook", qty: 50, status: "A", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank" ] },
							{ item: "paper", qty: 10, status: "D", size: { h: 8.5, w: 11, uom: "in" }, tags: [ "red", "blank", "plain" ] },
							{ item: "planner", qty: 0, status: "D", size: { h: 22.85, w: 30, uom: "cm" }, tags: [ "blank", "red" ] },
							{ item: "postcard", qty: 45, status: "A", size: { h: 10, w: 15.25, uom: "cm" }, tags: [ "blue" ] }
							])
							
>> To return documents where the tags array contains "red" as one of its elements:
   - db.getCollection("inventory").find({tags: "red"})
   
     -- The result will be the first 4 documents.
	 -- If the tags field is a string instead of an array, then the query is just an equality match.

	 

>> To return documents where the tags field matches the specified array exactly, including the order:
   - db.getCollection("inventory").find({tags: ["blank", "red"]})



>> $all operator
   - If, instead, you wish to find an array that contains both the elements "red" and "blank", without regard to order or other elements in the array, use the $all operator:
 
     -- db.getCollection("inventory").find({tags: {$all: ["red", "blank"]}})


>>   db.inventory.insertMany([
							{ item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
							{ item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
							{ item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
							{ item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
							{ item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
							]);
							
	 
   - To specify conditions on the elements in the array field, use query operators in the query filter document:
	 { <array field>: { <operator1>: <value1>, ... } }
   - For example, the following operation queries for all documents where the array dim_cm contains at least one element whose value is greater than 25.
	    
	 -- db.getCollection("inventory").find({"dim_cm": {$gte: 25}})	
	 
___________________________________________________________________________________________________________________________________________________________________

>> Specify Multiple Conditions for Array Elements
   - The following example queries for documents where the dim_cm array contains elements that in some combination satisfy the query conditions; 
     e.g., one element can satisfy the greater than 15 condition AND another element can satisfy the less than 20 condition, OR a single element can satisfy both:
	 
	 -- db.getCollection("inventory").find({dim_cm: {$lt: 20, $gt: 15}})
	    [
			{ dim_cm: [ 14, 21 ] },
			{ dim_cm: [ 14, 21 ] },
			{ dim_cm: [ 14, 21 ] },
			{ dim_cm: [ 10, 15.25 ] }
		]
     -- db.getCollection("inventory").find({"dim_cm": {$lt: 11, $gte: 30}})
	    No result as
		- dim_cm: [ 10, 15.25 ]       10 < 11   BUT   15.25 IS NOT $gte 30
        - dim_cm: [ 22.85, 30 ]		  30 >= 30  BUT   the other condition is not satisfied for the other element

___________________________________________________________________________________________________________________________________________________________________

>> Query for an Array Element that Meets Multiple Criteria
   - $elemMatch operator
   
   - Use $elemMatch operator to specify multiple criteria on the elements of an array such that at least one array element satisfies all the specified criteria.
   
   - where the dim_cm array contains at least one element that is both greater than ($gt) 22 and less than ($lt) 30:
     -- db.getCollection("inventory").find({dim_cm: {$elemMatch: {$gt: 22, $lt: 30}}})
	 
___________________________________________________________________________________________________________________________________________________________________

>> Query for an Element by the Array Index Position
   
   - Using dot notation, you can specify query conditions for an element at a particular index or position of the array. 
     The array uses zero-based indexing.

   
   - The following example queries for all documents where the second element in the array dim_cm is greater than 25:    
	 -- db.getCollection("inventory").find({"dim_cm.1": {$gte: 29}})
	 
___________________________________________________________________________________________________________________________________________________________________

>> Query an Array by Array Length
   - $size operator
   
   
   - Use the $size operator to query for arrays by number of elements. For example, the following selects documents where the array tags has 3 elements.
     -- db.getCollection("inventory").find({"tags": {$size: 3}})
	 
___________________________________________________________________________________________________________________________________________________________________

>> Specify Fields to Return (Projection)

   db.collection.find(<query document>, <projection document>)
    
   - In the projection document, specify:
     -- <field>: 1       to include a field in the returned documents
     -- <field>: 0       to exclude a field in the returned documents


>> To return the _id, item, and the status fields from all documents in the inventory collection:
   - db.getCollection("inventory").find({}, {item: 1, status: 1})     
     <=> SELECT _id, item, status FROM inventory
	 
	 !!! You do not have to specify the _id field to return the field. It returns by default.
	 
>> To return only the item, and the status fields in the matching documents:
   - db.getCollection("inventory").find({}, {_id: 0, status: 1, item: 1})
   
___________________________________________________________________________________________________________________________________________________________________

>> Views (???)

___________________________________________________________________________________________________________________________________________________________________


>> Query an Array of Embedded Documents
   - db.inventory.insertMany( [
							   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
							   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
							   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
							   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
							   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
							]);

   - To select all documents where an element in the instock array matches the specified document (including the field order):
     -- db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )
	    - The result will be the first row
		
		- The following query does not match any documents in the inventory collection:
		   db.getCollection('inventory').find({'instock': {qty: 5, warehouse: "A"}})
		   
___________________________________________________________________________________________________________________________________________________________________

>> Specify a Query Condition on a Field Embedded in an Array of Documents
   - If you do not know the index position of the document nested in the array, concatenate the name of the array field, with a dot (.) and the name of the field in the nested document.
   - The following example selects all documents where the instock array has at least one embedded document that contains the field qty whose value is less than or equal to 20:
   
     -- db.getCollection('inventory').find({'instock.qty': {$lt: 20} })
	 
___________________________________________________________________________________________________________________________________________________________________

>> Use the Array Index to Query for a Field in the Embedded Document
   - Using dot notation, you can specify query conditions for field in a document at a particular index or position of the array. 
	 
   !!! When querying using dot notation, the field and index must be inside quotation marks.
		   
   - Select all documents where the instock array has as its first element a document that contains the field qty whose value is less than or equal to 20:
     -- db.getCollection('inventory').find({'instock.0.qty': {$lte: 20} })

___________________________________________________________________________________________________________________________________________________________________

>> Use $elemMatch operator to specify multiple criteria on an array of embedded documents such that at least one embedded document satisfies all the specified criteria.
   
   - The following example queries for documents where the instock array has at least one embedded document that contains both the field qty equal to 5 and 
     the field warehouse equal to A:
	 
	 -- db.getCollection("inventory").find({instock: {$elemMatch: {qty: 5, warehouse: "A"} } })
	 
   - The following example queries for documents where the instock array has at least one embedded document that contains the field qty that is greater than 10 and 
     less than or equal to 20:

     -- db.getCollection("inventory").find({instock: {$elemMatch: {qty: {$gt: 10, $lte: 20}}}})
	 
___________________________________________________________________________________________________________________________________________________________________

>> If the compound query conditions on an array field do not use the $elemMatch operator, the query selects those documents whose array contains any combination of 
   elements that satisfies the conditions.
   
   - Documents where any document nested in the instock array has the qty field greater than 10 and any document (but not necessarily the same embedded document) 
     in the array has the qty field less than or equal to 20:
	 
	 -- db.getCollection('inventory').find({'instock.qty': {$gt: 10, $lte: 20}})
	 
___________________________________________________________________________________________________________________________________________________________________

>> The following example queries for documents where the instock array has at least one embedded document that contains the field qty equal to 5 and at least one 
   embedded document (but not necessarily the same embedded document) that contains the field warehouse equal to A:
   
   - db.getCollection('inventory').find({'instock.qty': 5, 'instock.warehouse': 'A'})

___________________________________________________________________________________________________________________________________________________________________